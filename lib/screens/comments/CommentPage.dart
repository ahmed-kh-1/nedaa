import 'package:call/providers/user_provider.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/post_model.dart';
import '../../models/comment_model.dart';
import '../../providers/comment_provider.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class CommentPage extends StatefulWidget {
  final PostModel post;

  const CommentPage({super.key, required this.post});

  @override
  State<CommentPage> createState() => _CommentPageState();
}

class _CommentPageState extends State<CommentPage> {
  final TextEditingController _controller = TextEditingController();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadComments();
    });
  }

  Future<void> _loadComments() async {
    final commentProvider =
        Provider.of<CommentProvider>(context, listen: false);
    await commentProvider.fetchCommentsByPostId(widget.post.postId);
  }

  Future<void> _saveComment(String commentText) async {
    final userProvider = Provider.of<UserProvider>(context, listen: false);
    final user =
        userProvider.currentUser; // Assuming you store your user object here

    if (user == null) {
      // Handle unauthenticated user
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('يجب تسجيل الدخول لإضافة تعليق')),
      );
      return;
    }

    final comment = CommentModel(
      id: '', // Will be generated by Supabase
      postId: widget.post.postId,
      commenterId: user.id,
      commenterName:
          user.fullName ?? 'مستخدم', // Adjust according to your user model
      commentText: commentText,
      createdAt: DateTime.now(),
    );

    final commentProvider =
        Provider.of<CommentProvider>(context, listen: false);
    try {
      await commentProvider.addComment(comment);
      _controller.clear();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('تم إضافة التعليق بنجاح')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('فشل في إضافة التعليق: $e')),
      );
    }
  }

  Future<void> _updateComment(String commentId, String newCommentText) async {
    final commentProvider =
        Provider.of<CommentProvider>(context, listen: false);

    try {
      // Find the comment to update
      final comments = commentProvider.comments;
      final commentIndex =
          comments.indexWhere((comment) => comment.id == commentId);

      if (commentIndex != -1) {
        final existingComment = comments[commentIndex];
        final updatedComment =
            existingComment.copyWith(commentText: newCommentText);
        await commentProvider.updateComment(commentId, updatedComment);
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('تم تحديث التعليق بنجاح')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('فشل في تحديث التعليق: $e')),
      );
    }
  }

  Future<void> _deleteComment(String commentId) async {
    final commentProvider =
        Provider.of<CommentProvider>(context, listen: false);
    try {
      await commentProvider.deleteComment(commentId);
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('تم حذف التعليق بنجاح')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('فشل في حذف التعليق: $e')),
      );
    }
  }

  void _showEditDialog(String commentId, String currentText) {
    final editController = TextEditingController(text: currentText);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('تعديل التعليق'),
        content: TextField(
          controller: editController,
          maxLines: null,
          decoration: const InputDecoration(
            hintText: 'قم بتعديل تعليقك هنا',
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('إلغاء'),
          ),
          ElevatedButton(
            onPressed: () {
              final newText = editController.text.trim();
              if (newText.isNotEmpty) {
                _updateComment(commentId, newText);
              }
            },
            child: const Text('حفظ'),
          ),
        ],
      ),
    );
  }

  void _showOptionsDialog(CommentModel comment) {
    showModalBottomSheet(
      context: context,
      builder: (context) => SafeArea(
        child: Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.edit),
              title: const Text('تعديل'),
              onTap: () {
                Navigator.pop(context);
                _showEditDialog(comment.id, comment.commentText);
              },
            ),
            ListTile(
              leading: const Icon(Icons.delete),
              title: const Text('حذف'),
              onTap: () {
                Navigator.pop(context);
                _deleteComment(comment.id);
              },
            ),
            ListTile(
              leading: const Icon(Icons.close),
              title: const Text('إلغاء'),
              onTap: () => Navigator.pop(context),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCommentItem(CommentModel comment) {
    return GestureDetector(
      onLongPress: () {
        final supabase = Supabase.instance.client;
        final user = supabase.auth.currentUser;
        if (user?.id == comment.commenterId) {
          _showOptionsDialog(comment);
        }
      },
      child: Card(
        margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 8),
        elevation: 2,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // أيقونة المستخدم أو صورة البروفايل
              CircleAvatar(
                radius: 18,
                backgroundColor: Colors.blue.shade300,
                child: const Icon(Icons.person, color: Colors.white),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // اسم المستخدم + الوقت
                    Row(
                      children: [
                        Text(
                          comment.commenterName,
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          _formatDateTime(comment.createdAt),
                          style: TextStyle(
                            color: Colors.grey[600],
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 6),
                    // نص التعليق
                    Text(
                      comment.commentText,
                      style: const TextStyle(fontSize: 15),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _formatDateTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inDays > 0) {
      return '${difference.inDays} يوم';
    } else if (difference.inHours > 0) {
      return '${difference.inHours} ساعة';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes} دقيقة';
    } else {
      return 'الآن';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'التعليقات ',
          style: TextStyle(fontSize: 20),
        ),
      ),
      body: Consumer<CommentProvider>(
        builder: (context, commentProvider, child) {
          if (commentProvider.isLoading) {
            return const Center(child: CircularProgressIndicator());
          }

          if (commentProvider.errorMessage != null) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('حدث خطأ: ${commentProvider.errorMessage}'),
                  ElevatedButton(
                    onPressed: () => _loadComments(),
                    child: const Text('إعادة المحاولة'),
                  ),
                ],
              ),
            );
          }

          final comments = commentProvider.comments;

          return Column(
            children: [
              Expanded(
                child: comments.isEmpty
                    ? const Center(child: Text('لا توجد تعليقات بعد.'))
                    : ListView.builder(
                        padding: const EdgeInsets.all(8),
                        itemCount: comments.length,
                        itemBuilder: (context, index) =>
                            _buildCommentItem(comments[index]),
                      ),
              ),
              const Divider(height: 1),
              SafeArea(
                child: Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 8, vertical: 10),
                  child: Row(
                    children: [
                      Expanded(
                        child: TextField(
                          controller: _controller,
                          decoration: const InputDecoration(
                            hintText: 'اكتب تعليقك...',
                            border: OutlineInputBorder(
                              borderRadius:
                                  BorderRadius.all(Radius.circular(25)),
                            ),
                            contentPadding: EdgeInsets.symmetric(
                                horizontal: 16, vertical: 10),
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      IconButton(
                        icon: const Icon(Icons.send, color: Colors.blue),
                        onPressed: () {
                          final text = _controller.text.trim();
                          if (text.isNotEmpty) {
                            _saveComment(text);
                          }
                        },
                      )
                    ],
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}
