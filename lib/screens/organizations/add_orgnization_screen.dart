import 'package:call/models/organization_model.dart';
import 'package:call/providers/organization_provider.dart';
import 'package:call/widgets/auth/auth_form_field.dart';
import 'package:call/widgets/auth/auth_header.dart';
import 'package:call/widgets/auth/auth_primary_button.dart';
import 'package:call/widgets/auth/auth_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class AddOrganizationScreen extends StatefulWidget {
  const AddOrganizationScreen({super.key, required this.name, required this.email});
  final String name, email;
  @override
  State<AddOrganizationScreen> createState() => _AddOrganizationScreenState();
}

class _AddOrganizationScreenState extends State<AddOrganizationScreen> {
  TimeOfDay? _openTime;
  TimeOfDay? _closeTime;

  // Store working hours as a formatted string, e.g. "08:00 - 17:00"
  String get workingHoursString {
    if (_openTime == null || _closeTime == null) return '';
    return '${_openTime!.format(context)} - ${_closeTime!.format(context)}';
  }

  Future<void> _pickWorkingHours() async {
    final open = await showTimePicker(
      context: context,
      initialTime: _openTime ?? const TimeOfDay(hour: 8, minute: 0),
      helpText: 'اختر وقت البداية',
      confirmText: 'تم',
      cancelText: 'إلغاء',
    );
    if (!mounted) return;
    if (open != null) {
      final close = await showTimePicker(
        context: context,
        initialTime: _closeTime ?? const TimeOfDay(hour: 17, minute: 0),
        helpText: 'اختر وقت النهاية',
        confirmText: 'تم',
        cancelText: 'إلغاء',
      );
      if (!mounted) return;
      setState(() {
        _openTime = open;
        if (close != null) {
          _closeTime = close;
        }
        _workingHoursController.text = workingHoursString;
      });
    }
  }

  final _formKey = GlobalKey<FormState>();

  final TextEditingController _shortDescController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _locationController = TextEditingController();
  final TextEditingController _workingHoursController = TextEditingController();

  // Categories for specialization dropdown
  final List<String> _categories = const [
    'الاغاثة',
    'الصحة',
    'التعليم',
    'البيئة',
    'اخرى',
  ];
  String? _selectedSpecialization;

  bool _isLoading = false;

  void _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    final org = OrganizationModel(
      id: '', // will be generated by Supabase
      name: widget.name,
      shortDescription: _shortDescController.text.trim(),
      generalDescription: _descriptionController.text.trim(),
      phone: _phoneController.text.trim(),
      email: widget.email,
      location: _locationController.text.trim(),
      workingHours: workingHoursString,
      ownerId: '', // will be added in service
      specialization: _selectedSpecialization ?? '',
    );

    try {
      await context.read<OrganizationProvider>().addOrganization(org);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('تمت إضافة الجمعية بنجاح')),
      );
      if (mounted) {
        Navigator.pushReplacementNamed(context, '/main-tab');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('حدث خطأ: $e')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return AuthScaffold(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const AuthHeader(
            icon: Icons.apartment,
            title: 'إضافة جمعية',
            subtitle: 'أدخل تفاصيل جمعيتك لإتمام التسجيل',
          ),
          const SizedBox(height: 32),
          Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const SizedBox(height: 20),
                AuthFormField(
                  label: 'نبذة مختصرة',
                  controller: _shortDescController,
                  prefixIcon: Icons.info_outline,
                  textInputAction: TextInputAction.next,
                  maxLines: 2,
                  validator: (v) => (v == null || v.trim().isEmpty)
                      ? 'هذا الحقل مطلوب'
                      : null,
                ),
                const SizedBox(height: 20),
                AuthFormField(
                  label: 'وصف عام',
                  controller: _descriptionController,
                  prefixIcon: Icons.description_outlined,
                  textInputAction: TextInputAction.newline,
                  keyboardType: TextInputType.multiline,
                  maxLines: 4,
                ),
                const SizedBox(height: 20),
                AuthFormField(
                  label: 'رقم الجوال',
                  controller: _phoneController,
                  prefixIcon: Icons.phone_outlined,
                  keyboardType: TextInputType.phone,
                  textInputAction: TextInputAction.next,
                  validator: (v) => (v == null || v.trim().isEmpty)
                      ? 'هذا الحقل مطلوب'
                      : null,
                ),
                const SizedBox(height: 20),
                // Specialization dropdown with label
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'التخصص',
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            fontWeight: FontWeight.w600,
                            color: Theme.of(context).colorScheme.onSurface,
                          ),
                    ),
                    const SizedBox(height: 8),
                    DropdownButtonFormField<String>(
                      value: _selectedSpecialization,
                      items: _categories
                          .map(
                            (c) => DropdownMenuItem<String>(
                              value: c,
                              child: Text(c),
                            ),
                          )
                          .toList(),
                      onChanged: (val) {
                        setState(() {
                          _selectedSpecialization = val;
                        });
                      },
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'هذا الحقل مطلوب';
                        }
                        return null;
                      },
                      decoration: InputDecoration(
                        filled: true,
                        fillColor: Theme.of(context).colorScheme.surface,
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(16),
                          borderSide: BorderSide.none,
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(16),
                          borderSide: BorderSide(
                            color: Theme.of(context)
                                .colorScheme
                                .outline
                                .withOpacity(0.5),
                            width: 1,
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(16),
                          borderSide: BorderSide(
                            color: Theme.of(context).colorScheme.primary,
                            width: 2,
                          ),
                        ),
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 18,
                        ),
                        hintText: 'اختر التخصص',
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                AuthFormField(
                  label: 'الموقع الجغرافي',
                  controller: _locationController,
                  prefixIcon: Icons.location_on_outlined,
                  textInputAction: TextInputAction.next,
                  validator: (v) => (v == null || v.trim().isEmpty)
                      ? 'هذا الحقل مطلوب'
                      : null,
                ),
                const SizedBox(height: 20),
                AuthFormField(
                  label: 'ساعات العمل',
                  controller: _workingHoursController,
                  prefixIcon: Icons.access_time,
                  readOnly: true,
                  onTap: _pickWorkingHours,
                  hint: 'مثال: 08:00 - 17:00',
                ),
                const SizedBox(height: 32),
                AuthPrimaryButton(
                  label: 'إضافة الجمعية',
                  loading: _isLoading,
                  onPressed: _isLoading ? null : _submitForm,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _shortDescController.dispose();
    _descriptionController.dispose();
    _phoneController.dispose();
    _locationController.dispose();
    _workingHoursController.dispose();
    super.dispose();
  }
}
