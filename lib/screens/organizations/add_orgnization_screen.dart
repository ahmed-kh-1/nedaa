import 'package:call/models/organization_model.dart';
import 'package:call/providers/organization_provider.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class AddOrganizationScreen extends StatefulWidget {
  const AddOrganizationScreen({super.key});

  @override
  State<AddOrganizationScreen> createState() => _AddOrganizationScreenState();
}

class _AddOrganizationScreenState extends State<AddOrganizationScreen> {
  TimeOfDay? _openTime;
  TimeOfDay? _closeTime;

  // Store working hours as a formatted string, e.g. "08:00 - 17:00"
  String get workingHoursString {
    if (_openTime == null || _closeTime == null) return '';
    return '${_openTime!.format(context)} - ${_closeTime!.format(context)}';
  }



  Widget _buildWorkingHoursPicker(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Expanded(
            child: OutlinedButton(
              onPressed: () async {
                final open = await showTimePicker(
                  context: context,
                  initialTime: _openTime ?? TimeOfDay(hour: 8, minute: 0),
                  helpText: 'اختر وقت البداية',
                  confirmText: 'تم',
                  cancelText: 'إلغاء',
                );
                if (open != null) {
                  setState(() => _openTime = open);
                }
              },
              child: Text(_openTime != null
                  ? 'من: ${_openTime!.format(context)}'
                  : 'وقت البداية'),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: OutlinedButton(
              onPressed: () async {
                final close = await showTimePicker(
                  context: context,
                  initialTime: _closeTime ?? TimeOfDay(hour: 17, minute: 0),
                  helpText: 'اختر وقت النهاية',
                  confirmText: 'تم',
                  cancelText: 'إلغاء',
                );
                if (close != null) {
                  setState(() => _closeTime = close);
                }
              },
              child: Text(_closeTime != null
                  ? 'إلى: ${_closeTime!.format(context)}'
                  : 'وقت النهاية'),
            ),
          ),
        ],
      ),
    );
  }

  final _formKey = GlobalKey<FormState>();

  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _shortDescController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _locationController = TextEditingController();

  
  bool _isLoading = false;

  void _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    final org = OrganizationModel(
      id: '', // will be generated by Supabase
      name: _nameController.text.trim(),
      shortDescription: _shortDescController.text.trim(),
      generalDescription: _descriptionController.text.trim(),
      phone: _phoneController.text.trim(),
      email: _emailController.text.trim(),
      location: _locationController.text.trim(),
      workingHours: workingHoursString,
      ownerId: '', // will be added in service
      specialization: "todo",
    );

    try {
      await context.read<OrganizationProvider>().addOrganization(org);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('تمت إضافة الجمعية بنجاح')),
      );
      Navigator.pop(context); // رجوع بعد الإضافة
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('حدث خطأ: $e')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('إضافة جمعية')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              _buildTextField(_nameController, 'اسم الجمعية'),
              _buildTextField(_shortDescController, 'نبذة مختصرة'),
              _buildTextField(_descriptionController, 'وصف عام', maxLines: 3),
              _buildTextField(_phoneController, 'رقم الجوال',
                  keyboardType: TextInputType.phone),
              _buildTextField(_emailController, 'البريد الإلكتروني',
                  keyboardType: TextInputType.emailAddress),
              _buildTextField(_locationController, 'الموقع الجغرافي'),
              _buildWorkingHoursPicker(context),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _isLoading ? null : _submitForm,
                child: _isLoading
                    ? const CircularProgressIndicator()
                    : const Text('إضافة'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(
    TextEditingController controller,
    String label, {
    TextInputType keyboardType = TextInputType.text,
    int maxLines = 1,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        keyboardType: keyboardType,
        maxLines: maxLines,
        decoration: InputDecoration(
          labelText: label,
          border: const OutlineInputBorder(),
        ),
        validator: (value) =>
            value == null || value.trim().isEmpty ? 'هذا الحقل مطلوب' : null,
      ),
    );
  }
}
